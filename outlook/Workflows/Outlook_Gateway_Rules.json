{
  "name": "Outlook Gateway Rules",
  "nodes": [
    {
      "parameters": {},
      "id": "e5d5c9f0-1234-4567-8901-gateway00001",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Load all active classification rules\nSELECT \n  r.id as rule_id,\n  r.feature,\n  r.key_value,\n  r.target_category,\n  r.recommended_action,\n  r.priority,\n  r.scope,\n  rm.precision_cat_pct,\n  rm.support\nFROM outlook.classification_rules r\nLEFT JOIN outlook.classification_rule_metrics rm ON r.id = rm.rule_id\nWHERE r.is_active = TRUE\nORDER BY r.priority ASC, r.feature ASC, r.key_value ASC",
        "options": {}
      },
      "id": "e5d5c9f0-1234-4567-8901-gateway00002",
      "name": "load_active_rules",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [450, 300],
      "credentials": {
        "postgres": {
          "id": "4rl59kH75QNg0oSk",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "assignment1",
              "name": "test_email",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "e5d5c9f0-1234-4567-8901-gateway00003",
      "name": "prepare_test_email",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [650, 300],
      "notesInFlow": true,
      "notes": "For testing: Set a sample email object here\nIn production, this will receive email from upstream workflow"
    },
    {
      "parameters": {
        "jsCode": "// Build features from email for rule matching\nconst email = $input.first().json.test_email || $input.first().json;\nconst rules = $('load_active_rules').all();\n\n// Helper function to normalize email addresses\nfunction normalizeEmail(addr) {\n  if (!addr) return null;\n  addr = String(addr).toLowerCase().trim();\n  \n  // Remove + tag if present\n  if (addr.includes('@')) {\n    const [localPart, domain] = addr.split('@');\n    const cleanLocal = localPart.split('+')[0];\n    return `${cleanLocal}@${domain}`;\n  }\n  return addr;\n}\n\n// Helper function to extract domain from email\nfunction extractDomain(email) {\n  if (!email || !email.includes('@')) return null;\n  return email.split('@')[1]?.toLowerCase();\n}\n\n// Helper function to extract domain from message-id header\nfunction extractMessageIdDomain(messageIdHeader) {\n  if (!messageIdHeader) return null;\n  const match = messageIdHeader.match(/@([^>]+)>?/);\n  return match ? match[1].toLowerCase() : null;\n}\n\n// Helper function to extract unsubscribe domain\nfunction extractUnsubDomain(unsubLink) {\n  if (!unsubLink) return null;\n  \n  // HTTP/HTTPS links\n  let match = unsubLink.match(/https?:\\/\\/([^\\/>,;]+)/);\n  if (match) return match[1].toLowerCase();\n  \n  // Mailto links\n  match = unsubLink.match(/@([^>,;]+)/);\n  if (match) return match[1].toLowerCase();\n  \n  return null;\n}\n\n// Build features from email\nconst features = {\n  from_address: normalizeEmail(email.from_address),\n  sender_address: normalizeEmail(email.sender_address),\n  reply_to_address: normalizeEmail(email.reply_to_address),\n  from_domain: email.from_domain?.toLowerCase() || extractDomain(email.from_address),\n  message_id_domain: extractMessageIdDomain(email.message_id_header),\n  list_domain: email.list_id ? email.list_id.match(/<([^>]+)>/)?.[1]?.toLowerCase() : null,\n  unsub_domain: extractUnsubDomain(email.unsubscribe_link)\n};\n\n// Log features for debugging\nconsole.log('Email features:', features);\nconsole.log('Active rules count:', rules.length);\n\n// Find matching rules\nconst matches = [];\n\nfor (const rule of rules) {\n  const ruleData = rule.json;\n  const featureValue = features[ruleData.feature];\n  \n  if (featureValue && featureValue === ruleData.key_value) {\n    matches.push({\n      rule_id: ruleData.rule_id,\n      feature: ruleData.feature,\n      key_value: ruleData.key_value,\n      target_category: ruleData.target_category,\n      recommended_action: ruleData.recommended_action,\n      priority: ruleData.priority,\n      precision: ruleData.precision_cat_pct,\n      support: ruleData.support\n    });\n  }\n}\n\n// Sort matches by priority (lower number = higher priority)\nmatches.sort((a, b) => a.priority - b.priority);\n\n// Return result\nif (matches.length > 0) {\n  const bestMatch = matches[0];\n  return {\n    json: {\n      matched: true,\n      email: email,\n      features: features,\n      decision: {\n        primary_category: bestMatch.target_category,\n        recommended_action: bestMatch.recommended_action,\n        rule_matched: true,\n        rule_id: bestMatch.rule_id,\n        feature: bestMatch.feature,\n        key: bestMatch.key_value,\n        confidence: bestMatch.precision || 95,\n        priority_score: bestMatch.priority === 10 ? 80 : bestMatch.priority === 20 ? 60 : 40\n      },\n      all_matches: matches,\n      classification_source: 'rule'\n    }\n  };\n} else {\n  return {\n    json: {\n      matched: false,\n      email: email,\n      features: features,\n      decision: null,\n      classification_source: 'needs_ai'\n    }\n  };\n}"
      },
      "id": "e5d5c9f0-1234-4567-8901-gateway00004",
      "name": "apply_rules",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.matched }}",
              "value2": true
            }
          ]
        }
      },
      "id": "e5d5c9f0-1234-4567-8901-gateway00005",
      "name": "Check if matched",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Update email with rule-based classification\nINSERT INTO outlook.email_interest (\n  message_id,\n  model_name,\n  model_version,\n  primary_category,\n  recommended_action,\n  confidence,\n  priority_score,\n  rule_conditions,\n  decided_at,\n  status\n) VALUES (\n  '{{ $json.email.message_id }}',\n  'rule_engine',\n  'v1.0',\n  '{{ $json.decision.primary_category }}',\n  '{{ $json.decision.recommended_action }}',\n  {{ $json.decision.confidence }},\n  {{ $json.decision.priority_score }},\n  '{{ $json.decision.feature }}:{{ $json.decision.key }}',\n  NOW(),\n  'accepted'\n)\nON CONFLICT (message_id) \nDO UPDATE SET\n  primary_category = EXCLUDED.primary_category,\n  recommended_action = EXCLUDED.recommended_action,\n  confidence = EXCLUDED.confidence,\n  priority_score = EXCLUDED.priority_score,\n  rule_conditions = EXCLUDED.rule_conditions,\n  updated_at = NOW()\nRETURNING *;",
        "options": {}
      },
      "id": "e5d5c9f0-1234-4567-8901-gateway00006",
      "name": "save_rule_decision",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1250, 200],
      "credentials": {
        "postgres": {
          "id": "4rl59kH75QNg0oSk",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Mark email as analyzed by rules\nUPDATE outlook.emails_ingest\nSET \n  analyzed_at = NOW(),\n  auto_processed = TRUE\nWHERE message_id = '{{ $json.email.message_id }}'\nRETURNING message_id, analyzed_at;",
        "options": {}
      },
      "id": "e5d5c9f0-1234-4567-8901-gateway00007",
      "name": "mark_analyzed",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1450, 200],
      "credentials": {
        "postgres": {
          "id": "4rl59kH75QNg0oSk",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Format response for rule-matched email\nconst decision = $('apply_rules').first().json.decision;\nconst email = $('apply_rules').first().json.email;\nconst saved = $input.first().json;\n\nreturn {\n  json: {\n    success: true,\n    message_id: email.message_id,\n    classification_source: 'rule',\n    category: decision.primary_category,\n    action: decision.recommended_action,\n    confidence: decision.confidence,\n    rule_used: `${decision.feature}:${decision.key}`,\n    processing_time_ms: 50,\n    saved_at: saved.decided_at\n  }\n};"
      },
      "id": "e5d5c9f0-1234-4567-8901-gateway00008",
      "name": "format_rule_response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 200]
    },
    {
      "parameters": {
        "jsCode": "// Prepare for AI processing\nconst email = $('apply_rules').first().json.email;\n\nreturn {\n  json: {\n    needs_ai: true,\n    message_id: email.message_id,\n    email: email,\n    reason: 'no_matching_rules',\n    checked_features: $('apply_rules').first().json.features\n  }\n};"
      },
      "id": "e5d5c9f0-1234-4567-8901-gateway00009",
      "name": "prepare_for_ai",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 400],
      "notesInFlow": true,
      "notes": "Email needs AI processing\nWill be passed to Outlook Validate Analyse workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "test1",
              "name": "test_scenarios",
              "value": "={{ [\n  {\n    \"scenario\": \"Inderes newsletter\",\n    \"message_id\": \"test-001\",\n    \"from_address\": \"noreply@mail.inderes.com\",\n    \"from_domain\": \"mail.inderes.com\",\n    \"subject\": \"Aamukatsaus 14.10.\",\n    \"message_id_header\": \"<abc123@newsletter.inderes.fi>\",\n    \"unsubscribe_link\": \"https://inderes.us10.list-manage.com/unsubscribe\"\n  },\n  {\n    \"scenario\": \"SharkAccount critical\",\n    \"message_id\": \"test-002\",\n    \"from_address\": \"niina.vuorinen@sharkaccount.fi\",\n    \"from_domain\": \"sharkaccount.fi\",\n    \"subject\": \"Q3 Raportti valmis\"\n  },\n  {\n    \"scenario\": \"Microsoft Quarantine\",\n    \"message_id\": \"test-003\",\n    \"from_address\": \"quarantine@messaging.microsoft.com\",\n    \"from_domain\": \"messaging.microsoft.com\",\n    \"subject\": \"Quarantine digest\"\n  },\n  {\n    \"scenario\": \"Unknown sender (needs AI)\",\n    \"message_id\": \"test-004\",\n    \"from_address\": \"info@example.com\",\n    \"from_domain\": \"example.com\",\n    \"subject\": \"Important update\"\n  }\n] }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "e5d5c9f0-1234-4567-8901-gateway00010",
      "name": "test_data_generator",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [450, 500],
      "notesInFlow": true,
      "notes": "Test scenarios for validating gateway functionality"
    },
    {
      "parameters": {
        "content": "## Outlook Gateway Rules Workflow\n\n### Purpose\nApply rule-based classification before AI processing to:\n- Speed up processing (0.1s vs 3-5s)\n- Reduce AI costs (~25% fewer calls)\n- Ensure 100% accuracy for known senders\n\n### How it works\n1. **Load Rules**: Fetches active rules from DB\n2. **Build Features**: Extracts normalized features from email\n3. **Apply Rules**: Matches by priority (10>20>30)\n4. **Decision Path**:\n   - Match found → Save & return\n   - No match → Pass to AI\n\n### Integration\nCall this workflow from `Outlook Validate Select` before AI processing.\n\n### Testing\nUse test_data_generator node with sample emails.",
        "height": 399.5122329380451,
        "width": 393.68587532842233
      },
      "id": "e5d5c9f0-1234-4567-8901-gateway00011",
      "name": "Documentation",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [180, 100]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "load_active_rules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "load_active_rules": {
      "main": [
        [
          {
            "node": "prepare_test_email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare_test_email": {
      "main": [
        [
          {
            "node": "apply_rules",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "apply_rules": {
      "main": [
        [
          {
            "node": "Check if matched",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if matched": {
      "main": [
        [
          {
            "node": "save_rule_decision",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "prepare_for_ai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save_rule_decision": {
      "main": [
        [
          {
            "node": "mark_analyzed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "mark_analyzed": {
      "main": [
        [
          {
            "node": "format_rule_response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "test_data_generator": {
      "main": [
        [
          {
            "node": "prepare_test_email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "gateway-v1.0",
  "id": "outlook-gateway-rules",
  "meta": {
    "instanceId": "n8n-outlook"
  },
  "tags": []
}